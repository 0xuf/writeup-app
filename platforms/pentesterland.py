from requests import get
from bs4 import BeautifulSoup


class PentesterlandScrapper:
    """
    This class will Scrap the pentester.land
    """
    BASE_URL = "https://pentester.land/list-of-bug-bounty-writeups.html"
    output_data = []
    headers = {
        "Host": "pentester.land",
        "User-Agent": "Mozilla/5.0 (X11; Linux x86_64; rv:103.0) Gecko/20100101 Firefox/103.0",
        "Accept": "text/html,application/xhtml+xml,application/xml;q=0.9,image/avif,image/webp,*/*;q=0.8",
        "Accept-Language": "en-US,en;q=0.5",
        "Upgrade-Insecure-Requests": "1",
        "Sec-Fetch-Dest": "document",
        "Sec-Fetch-Mode": "navigate",
        "Sec-Fetch-Site": "none",
        "Sec-Fetch-User": "?1",
        "Connection": "close",
    }

    def get_response(self) -> list:
        """
        This method receives all the write-ups of this year and outputs them as a list.
        :return: pentester.lab write-ups
        :rtype: list
        """
        _resp = get(url=self.BASE_URL, headers=self.headers)
        # Parse HTML with BS4
        bs = BeautifulSoup(_resp.content.decode("utf-8"), "html.parser")
        find_table = bs.findAll("table")[0]

        # Extract data from pentester.land
        for row in find_table.findAll("tr"):

            # Check if author has link
            try:
                _author_row = row.findAll("a")[1]
                _post_row = row.findAll("a")[0]
            except IndexError as e:
                get_row = row.findAll("td")
                try:
                    _author_row = get_row[1]
                    _post_row = get_row[0].findAll("a")[0]
                except IndexError:
                    continue

            # Put Author link None author doesn't have link
            try:
                _author = dict(
                    name=_author_row.text,
                    username=_author_row.attrs["href"]
                )
            except KeyError:
                _author = dict(
                    name=_author_row.text,
                    username=None
                )

            _post = dict(
                title=_post_row.text,
                link=_post_row.attrs["href"]
            )
            self.output_data.append(
                {
                    "author": _author,
                    "post": _post
                }
            )

        return self.output_data
